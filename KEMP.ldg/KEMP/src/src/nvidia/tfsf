/*
Author        : Myung-Su Seok
Purpose       : OpenCL kernels to incident wave
Target        : GPU
Last Modified : 2012.05.08
*/

#include <stdio.h>

__ACTIVATE_FLOAT64__

__KERNEL__ void update_tfsf_2d( int ax, int dr, int sg \
                              , int id_tfsf, int id_incf \
                              , int i_strt, int j_strt \
                              , int nx_tfsf, int ny_tfsf \
                              , int nx, int ny \
                              , __GLOBAL__ __FLOAT__* tfsf, __GLOBAL__ __FLOAT__* incf \
                              , __GLOBAL__ __FLOAT__* cf \
                              , __FLOAT__ rds )
{
    int idx = __GET_GLOBAL_INDEX__;
    int idx_tfsf, idx_incf, idx_max, i, j;

    if(ax==0)
    {
        i = i_strt + dr*(nx_tfsf-1);
        j = j_strt + idx;
        idx_tfsf = (i+id_tfsf)*ny + j;
        idx_incf = (i+id_incf)*ny + j;
        idx_max  = ny_tfsf;
    }
    if(ax==1)
    {
        i = i_strt + idx;
        j = j_strt + dr*(ny_tfsf-1);
        idx_tfsf = i*ny + (j+id_tfsf);
        idx_incf = i*ny + (j+id_incf);
        idx_max  = nx_tfsf;
    }
    if(idx<idx_max) { tfsf[idx_tfsf] += sg*cf[idx_tfsf]*rds*incf[idx_incf]; }
}

__KERNEL__ void update_tfsf_3d( int ax, int dr \
                              , int id_tfsf, int id_incf \
                              , int i_strt, int j_strt, int k_strt \
                              , int nx_tfsf, int ny_tfsf, int nz_tfsf \
                              , int nx, int ny, int nz \
                              , __GLOBAL__ __FLOAT__* tfsf0, __GLOBAL__ __FLOAT__* incf0 \
                              , __GLOBAL__ __FLOAT__* tfsf1, __GLOBAL__ __FLOAT__* incf1 \
                              , __GLOBAL__ __FLOAT__* cf0, __GLOBAL__ __FLOAT__* cf1 \
                              , __FLOAT__ rds )
{
    int idx = __GET_GLOBAL_INDEX__;
    int idx_tfsf, idx_incf, idx_max, i, j, k;

    if(ax==0)
    {
        i = dr*(nx_tfsf-1);
        j = idx /   nz_tfsf;
        k = idx - j*nz_tfsf;
        i += i_strt;
        j += j_strt;
        k += k_strt;
        idx_tfsf = (i+id_tfsf)*ny*nz + j*nz + k;
        idx_incf = (i+id_incf)*ny*nz + j*nz + k;
        idx_max  = ny_tfsf*nz_tfsf;
    }
    if(ax==1)
    {
        i = idx /   nz_tfsf;
        j = dr*(ny_tfsf-1);
        k = idx - i*nz_tfsf;
        i += i_strt;
        j += j_strt;
        k += k_strt;
        idx_tfsf = i*ny*nz + (j+id_tfsf)*nz + k;
        idx_incf = i*ny*nz + (j+id_incf)*nz + k;
        idx_max  = nz_tfsf*nx_tfsf;
    }
    if(ax==2)
    {
        i = idx /   ny_tfsf;
        j = idx - i*ny_tfsf;
        k = dr*(nz_tfsf-1);
        i += i_strt;
        j += j_strt;
        k += k_strt;
        idx_tfsf = i*ny*nz + j*nz + (k+id_tfsf);
        idx_incf = i*ny*nz + j*nz + (k+id_incf);
        idx_max  = nx_tfsf*ny_tfsf;
    }
    if(idx<idx_max)
    {
        tfsf0[idx_tfsf] += cf0[idx_tfsf]*rds*incf0[idx_incf];
        tfsf1[idx_tfsf] -= cf1[idx_tfsf]*rds*incf1[idx_incf];
    }
}

__KERNEL__ void update_tfsf_1d_to_2d( int ax, int dr, int sg \
                                    , int id_tfsf \
                                    , int i_strt, int j_strt \
                                    , int nx_tfsf, int ny_tfsf \
                                    , int nx, int ny, int nn \
                                    , __FLOAT__ id0_incf, __FLOAT__ id1_incf, __FLOAT__ id2_incf \
                                    , __FLOAT__ rotvec_x, __FLOAT__ rotvec_y \
                                    , __FLOAT__ pol \
                                    , __GLOBAL__ __FLOAT__* tfsf, __GLOBAL__ __FLOAT__* incf \
                                    , __GLOBAL__ __FLOAT__* cf \
                                    , __FLOAT__ rds )
{
    int idx = __GET_GLOBAL_INDEX__;
    int idx_tfsf, idx_incf, idx_max, i, j;
    __FLOAT__ fidx_incf, inc;

    if(ax==0)
    {
        i = i_strt + dr*(nx_tfsf-1);
        j = j_strt + idx;
        idx_tfsf  = (i+id_tfsf)*ny + j;
        fidx_incf = (i+id0_incf-i_strt-0.5*nx_tfsf)*rotvec_x \
                  + (j+id1_incf-j_strt-0.5*ny_tfsf)*rotvec_y \
                  + id2_incf + 0.5*nn;
        idx_incf = (int)fidx_incf;
        idx_max  = ny_tfsf;
    }
    if(ax==1)
    {
        i = i_strt + idx;
        j = j_strt + dr*(ny_tfsf-1);
        idx_tfsf  = i*ny + (j+id_tfsf);
        fidx_incf = (i+id0_incf-i_strt-0.5*nx_tfsf)*rotvec_x \
                  + (j+id1_incf-j_strt-0.5*ny_tfsf)*rotvec_y \
                  + id2_incf + 0.5*nn;
        idx_incf = (int)fidx_incf;
        idx_max  = nx_tfsf;
    }
    if(idx<idx_max)
    {
        inc = incf[idx_incf]*(idx_incf + 1 - fidx_incf) + incf[idx_incf+1]*(fidx_incf - idx_incf);
        tfsf[idx_tfsf] += sg*cf[idx_tfsf]*rds*pol*inc;
    }
}

__KERNEL__ void update_tfsf_1d_to_3d( int ax, int dr \
                                    , int id_tfsf \
                                    , int i_strt, int j_strt, int k_strt \
                                    , int nx_tfsf, int ny_tfsf, int nz_tfsf \
                                    , int nx, int ny, int nz, int nn, int bx \
                                    , __FLOAT__ id00_incf, __FLOAT__ id01_incf, __FLOAT__ id02_incf, __FLOAT__ id03_incf \
                                    , __FLOAT__ id10_incf, __FLOAT__ id11_incf, __FLOAT__ id12_incf, __FLOAT__ id13_incf \
                                    , __FLOAT__ rotvec_x, __FLOAT__ rotvec_y, __FLOAT__ rotvec_z \
                                    , __FLOAT__ pol0, __FLOAT__ pol1 \
                                    , __GLOBAL__ __FLOAT__* tfsf0, __GLOBAL__ __FLOAT__* incf0 \
                                    , __GLOBAL__ __FLOAT__* tfsf1, __GLOBAL__ __FLOAT__* incf1 \
                                    , __GLOBAL__ __FLOAT__* cf0, __GLOBAL__ __FLOAT__* cf1 \
                                    , __FLOAT__ rds )
{
    int idx = __GET_GLOBAL_INDEX__;
    int idx_tfsf, idx0_incf, idx1_incf, idx_max, i, j, k;
    __FLOAT__ fidx0_incf, fidx1_incf, inc0, inc1;

    if(ax==0)
    {
        i = dr*(nx_tfsf-1);
        j = idx /   nz_tfsf;
        k = idx - j*nz_tfsf;
        i += i_strt;
        j += j_strt;
        k += k_strt;
        idx_tfsf = (i+id_tfsf)*ny*nz + j*nz + k;
        fidx0_incf = (i+id00_incf-i_strt-0.5*nx_tfsf-bx)*rotvec_x \
                   + (j+id01_incf-j_strt-0.5*ny_tfsf   )*rotvec_y \
                   + (k+id02_incf-k_strt-0.5*nz_tfsf   )*rotvec_z \
                   + id03_incf + 0.5*nn;
        fidx1_incf = (i+id10_incf-i_strt-0.5*nx_tfsf-bx)*rotvec_x \
                   + (j+id11_incf-j_strt-0.5*ny_tfsf   )*rotvec_y \
                   + (k+id12_incf-k_strt-0.5*nz_tfsf   )*rotvec_z \
                   + id13_incf + 0.5*nn;
        idx0_incf = (int)fidx0_incf;
        idx1_incf = (int)fidx1_incf;
        idx_max  = ny_tfsf*nz_tfsf;
    }
    if(ax==1)
    {
        i = idx /   nz_tfsf;
        j = dr*(ny_tfsf-1);
        k = idx - i*nz_tfsf;
        i += i_strt;
        j += j_strt;
        k += k_strt;
        idx_tfsf = i*ny*nz + (j+id_tfsf)*nz + k;
        fidx0_incf = (i+id00_incf-i_strt-0.5*nx_tfsf-bx)*rotvec_x \
                   + (j+id01_incf-j_strt-0.5*ny_tfsf   )*rotvec_y \
                   + (k+id02_incf-k_strt-0.5*nz_tfsf   )*rotvec_z \
                   + id03_incf + 0.5*nn;
        fidx1_incf = (i+id10_incf-i_strt-0.5*nx_tfsf-bx)*rotvec_x \
                   + (j+id11_incf-j_strt-0.5*ny_tfsf   )*rotvec_y \
                   + (k+id12_incf-k_strt-0.5*nz_tfsf   )*rotvec_z \
                   + id13_incf + 0.5*nn;
        idx0_incf = (int)fidx0_incf;
        idx1_incf = (int)fidx1_incf;
        idx_max  = nz_tfsf*nx_tfsf;
    }
    if(ax==2)
    {
        i = idx /   ny_tfsf;
        j = idx - i*ny_tfsf;
        k = dr*(nz_tfsf-1);
        i += i_strt;
        j += j_strt;
        k += k_strt;
        idx_tfsf = i*ny*nz + j*nz + (k+id_tfsf);
        fidx0_incf = (i+id00_incf-i_strt-0.5*nx_tfsf-bx)*rotvec_x \
                   + (j+id01_incf-j_strt-0.5*ny_tfsf   )*rotvec_y \
                   + (k+id02_incf-k_strt-0.5*nz_tfsf   )*rotvec_z \
                   + id03_incf + 0.5*nn;
        fidx1_incf = (i+id10_incf-i_strt-0.5*nx_tfsf-bx)*rotvec_x \
                   + (j+id11_incf-j_strt-0.5*ny_tfsf   )*rotvec_y \
                   + (k+id12_incf-k_strt-0.5*nz_tfsf   )*rotvec_z \
                   + id13_incf + 0.5*nn;
        idx0_incf = (int)fidx0_incf;
        idx1_incf = (int)fidx1_incf;
        idx_max  = nx_tfsf*ny_tfsf;
    }
    if(idx<idx_max)
    {
        /*if(idx==0)
        {
            printf("ax: %d, dr: %d, idx: %d, idx0_incf: %d, idx1_incf: %d\n", ax, dr, idx, idx0_incf, idx1_incf);
        }*/
        inc0 = incf0[idx0_incf]*(idx0_incf + 1 - fidx0_incf) + incf0[idx0_incf+1]*(fidx0_incf - idx0_incf);
        inc1 = incf1[idx1_incf]*(idx1_incf + 1 - fidx1_incf) + incf1[idx1_incf+1]*(fidx1_incf - idx1_incf);
        tfsf0[idx_tfsf] += cf0[idx_tfsf]*rds*pol0*inc0;
        tfsf1[idx_tfsf] -= cf1[idx_tfsf]*rds*pol1*inc1;
    }
}