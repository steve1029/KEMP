/*
Author  : Myung-su Seok
Purpose : nVIDIA CUDA, OpenCL kernels to update the core of FDTD
Target  : nVIDIA GPU
Last Modified: 2013.08.20
*/

__ACTIVATE_FLOAT64__

__KERNEL__ void update_e_2dte( int nx, int ny \
                             , __GLOBAL__ __FLOAT__* ex, __GLOBAL__ __FLOAT__* ey \
                             , __GLOBAL__ __FLOAT__* hz \
                             , __GLOBAL__ __FLOAT__* ce1x, __GLOBAL__ __FLOAT__* ce1y \
                             , __GLOBAL__ __FLOAT__* ce2x, __GLOBAL__ __FLOAT__* ce2y \
                             , __GLOBAL__ __FLOAT__* rdx_e, __GLOBAL__ __FLOAT__* rdy_e \
                             )
{
    int idx = __GET_GLOBAL_INDEX__;
    int i   =           idx /   ny;
    int j   =           idx - i*ny;

    if(idx<nx*ny)
    {
        if(i>0) { ey[idx] = ce1y[idx]*ey[idx] - ce2y[idx]*rdx_e[i]*(hz[idx] - hz[idx-ny]); }
        if(j>0) { ex[idx] = ce1x[idx]*ex[idx] + ce2x[idx]*rdy_e[j]*(hz[idx] - hz[idx- 1]); }
    }
}

__KERNEL__ void update_h_2dte( int nx, int ny \
                             , __GLOBAL__ __FLOAT__* ex, __GLOBAL__ __FLOAT__* ey \
                             , __GLOBAL__ __FLOAT__* hz \
                             , __GLOBAL__ __FLOAT__* ch1z, __GLOBAL__ __FLOAT__* ch2z \
                             , __GLOBAL__ __FLOAT__* rdx_h, __GLOBAL__ __FLOAT__* rdy_h \
                             )
{
    int idx = __GET_GLOBAL_INDEX__;
    int i   =           idx /   ny;
    int j   =           idx - i*ny;

    if(idx<nx*ny)
    {
        if(i<nx-1 && j<ny-1) { hz[idx] = ch1z[idx]*hz[idx] - ch2z[idx]*(rdx_h[i]*(ey[idx+ny] - ey[idx]) - rdy_h[j]*(ex[idx+ 1] - ex[idx])); }
    }
}

__KERNEL__ void update_e_2dtm( int nx, int ny \
                             , __GLOBAL__ __FLOAT__* ez \
                             , __GLOBAL__ __FLOAT__* hx, __GLOBAL__ __FLOAT__* hy \
                             , __GLOBAL__ __FLOAT__* ce1z \
                             , __GLOBAL__ __FLOAT__* ce2z \
                             , __GLOBAL__ __FLOAT__* rdx_e, __GLOBAL__ __FLOAT__* rdy_e \
                             )
{
    int idx = __GET_GLOBAL_INDEX__;
    int i   =           idx /   ny;
    int j   =           idx - i*ny;

    if(idx<nx*ny)
    {
        if(i>0 && j>0) { ez[idx] = ce1z[idx]*ez[idx] + ce2z[idx]*(rdx_e[i]*(hy[idx] - hy[idx-ny]) - rdy_e[j]*(hx[idx] - hx[idx- 1])); }
    }
}

__KERNEL__ void update_h_2dtm( int nx, int ny \
                             , __GLOBAL__ __FLOAT__* ez \
                             , __GLOBAL__ __FLOAT__* hx, __GLOBAL__ __FLOAT__* hy \
                             , __GLOBAL__ __FLOAT__* ch1x, __GLOBAL__ __FLOAT__* ch1y \
                             , __GLOBAL__ __FLOAT__* ch2x, __GLOBAL__ __FLOAT__* ch2y \
                             , __GLOBAL__ __FLOAT__* rdx_h, __GLOBAL__ __FLOAT__* rdy_h \
                             )
{
    int idx = __GET_GLOBAL_INDEX__;
    int i   =           idx /   ny;
    int j   =           idx - i*ny;

    if(idx<nx*ny)
    {
        if(i<nx-1) { hy[idx] = ch1y[idx]*hy[idx] + ch2y[idx]*rdx_h[i]*(ez[idx+ny] - ez[idx]); }
        if(j<ny-1) { hx[idx] = ch1x[idx]*hx[idx] - ch2x[idx]*rdy_h[j]*(ez[idx+ 1] - ez[idx]); }
    }
}

__KERNEL__ void update_e_3d( int nx, int ny, int nz \
                           , __GLOBAL__ __FLOAT__* ex, __GLOBAL__ __FLOAT__* ey, __GLOBAL__ __FLOAT__* ez \
                           , __GLOBAL__ __FLOAT__* hx, __GLOBAL__ __FLOAT__* hy, __GLOBAL__ __FLOAT__* hz \
                           , __GLOBAL__ __FLOAT__* ce1x, __GLOBAL__ __FLOAT__* ce1y, __GLOBAL__ __FLOAT__* ce1z \
                           , __GLOBAL__ __FLOAT__* ce2x, __GLOBAL__ __FLOAT__* ce2y, __GLOBAL__ __FLOAT__* ce2z \
                           , __GLOBAL__ __FLOAT__* rdx_e, __GLOBAL__ __FLOAT__* rdy_e, __GLOBAL__ __FLOAT__* rdz_e \
                           )
{
    int  tx =  __GET_LOCAL_INDEX__;
    int idx = __GET_GLOBAL_INDEX__;
    int i   =  idx /  (ny*nz)      ;
    int j   = (idx - i*ny*nz)/   nz;
    int k   =  idx - i*ny*nz - j*nz;

    __LOCAL__ __FLOAT__ s[__LOCAL_SIZE__*3+2];
    __LOCAL__ __FLOAT__ *sx, *sy, *sz;
    sz = s;
    sy = &sz[__LOCAL_SIZE__+1];
    sx = &sy[__LOCAL_SIZE__+1];
    if(idx < nx*ny*nz)
    {
        sx[tx] = hx[idx];
        sy[tx] = hy[idx];
        sz[tx] = hz[idx];
        if(tx == 0)
        {
            sx[tx-1] = hx[idx-1];
            sy[tx-1] = hy[idx-1];
        }
    }
    __LOCAL_BARRIER__;

    if(idx<nx*ny*nz)
    {
        if(i>0 && j>0) { ez[idx] = ce1z[idx]*ez[idx] + ce2z[idx]*(rdx_e[i]*(sy[tx] - hy[idx-ny*nz]) - rdy_e[j]*(sx[tx] - hx[idx-   nz])); }
        if(j>0 && k>0) { ex[idx] = ce1x[idx]*ex[idx] + ce2x[idx]*(rdy_e[j]*(sz[tx] - hz[idx-   nz]) - rdz_e[k]*(sy[tx] - sy[ tx-    1])); }
        if(k>0 && i>0) { ey[idx] = ce1y[idx]*ey[idx] + ce2y[idx]*(rdz_e[k]*(sx[tx] - sx[ tx-    1]) - rdx_e[i]*(sz[tx] - hz[idx-ny*nz])); }
    }
}

__KERNEL__ void update_h_3d( int nx, int ny, int nz \
                           , __GLOBAL__ __FLOAT__* ex, __GLOBAL__ __FLOAT__* ey, __GLOBAL__ __FLOAT__* ez \
                           , __GLOBAL__ __FLOAT__* hx, __GLOBAL__ __FLOAT__* hy, __GLOBAL__ __FLOAT__* hz \
                           , __GLOBAL__ __FLOAT__* ch1x, __GLOBAL__ __FLOAT__* ch1y, __GLOBAL__ __FLOAT__* ch1z \
                           , __GLOBAL__ __FLOAT__* ch2x, __GLOBAL__ __FLOAT__* ch2y, __GLOBAL__ __FLOAT__* ch2z \
                           , __GLOBAL__ __FLOAT__* rdx_h, __GLOBAL__ __FLOAT__* rdy_h, __GLOBAL__ __FLOAT__* rdz_h \
                           )
{
    int  tx =  __GET_LOCAL_INDEX__;
    int idx = __GET_GLOBAL_INDEX__;
    int i   =  idx /  (ny*nz)      ;
    int j   = (idx - i*ny*nz)/   nz;
    int k   =  idx - i*ny*nz - j*nz;

    __LOCAL__ __FLOAT__ sx[__LOCAL_SIZE__+1], sy[__LOCAL_SIZE__+1], sz[__LOCAL_SIZE__];
    if(idx < nx*ny*nz)
    {
        sx[tx] = ex[idx];
        sy[tx] = ey[idx];
        sz[tx] = ez[idx];
        if(tx == __LOCAL_SIZE__-1)
        {
            sx[tx+1] = ex[idx+1];
            sy[tx+1] = ey[idx+1];
        }
    }
    __LOCAL_BARRIER__;

    if(idx<nx*ny*nz)
    {
        if(i<nx-1 && j<ny-1) { hz[idx] = ch1z[idx]*hz[idx] - ch2z[idx]*(rdx_h[i]*(ey[idx+ny*nz] - sy[tx]) - rdy_h[j]*(ex[idx+   nz] - sx[tx])); }
        if(j<ny-1 && k<nz-1) { hx[idx] = ch1x[idx]*hx[idx] - ch2x[idx]*(rdy_h[j]*(ez[idx+   nz] - sz[tx]) - rdz_h[k]*(sy[ tx+    1] - sy[tx])); }
        if(k<nz-1 && i<nx-1) { hy[idx] = ch1y[idx]*hy[idx] - ch2y[idx]*(rdz_h[k]*(sx[ tx+    1] - sx[tx]) - rdx_h[i]*(ez[idx+ny*nz] - sz[tx])); }
    }
}
